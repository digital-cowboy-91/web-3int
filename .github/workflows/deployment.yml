name: CI/CD

on:
  # Auto trigger
  push:
    branches: [main]
    paths-ignore:
      - ".github/workflows/**"
      # ignore all changes in root folder but not in subfolders
      - "*"

  # Manual trigger
  workflow_dispatch:
    inputs:
      option:
        description: Job/s to run
        type: choice
        required: true
        options:
          - all
          - build_and_push
          - deploy

env:
  SSH_CONN: "${{ secrets.DO_USERNAME }}@${{ secrets.DO_HOST }}"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event.inputs.option != 'deploy'
    steps:
      - name: Compute additional env variables
        run: |
          echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "COMMIT=$(echo $GITHUB_SHA | head -c7)" >> $GITHUB_ENV
          echo "DO_REG_IMAGE=${{ secrets.DO_REGISTRY }}/$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: Build docker image
        run: |
          docker build \
          -t ${{ env.DO_REG_IMAGE }}:${{ env.COMMIT }} -t ${{ env.DO_REG_IMAGE }}:latest \
          --build-arg MONGO_URL="${{ secrets.WEB_MONGO_URL }}" \
          --build-arg RECAPTCHA_SECRET_KEY="${{ secrets.WEB_RECAPTCHA_SECRET_KEY }}" \
          --build-arg RECAPTCHA_SITE_KEY="${{ secrets.WEB_RECAPTCHA_SITE_KEY }}" \
          --no-cache .
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      - name: Log in to DOCR
        run: doctl registry login --expiry-seconds 600

      - name: Push image
        run: |
          docker push ${{ env.DO_REG_IMAGE }}:${{ env.COMMIT }}
          docker push ${{ env.DO_REG_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: (github.event_name == 'push' || github.event.inputs.option == 'all' || (github.event.inputs.option == 'deploy' && always())) && !cancelled() && !failure()
    steps:
      - name: Compute additional env variables
        run: |
          echo "REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "DO_REG_IMAGE=${{ secrets.DO_REGISTRY }}/$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
          echo "WORKDIR=/services/$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)" >> $GITHUB_ENV
      # - name: Checkout the repo
      #   uses: actions/checkout@v2
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}
      - name: Establish SSH connection
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/dovps
          chmod 600 ~/.ssh/dovps
          eval `ssh-agent`
          ssh-add ~/.ssh/dovps
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

          doctl compute ssh vps1 --ssh-key-path ~/.ssh/dovps
      # - name: Setup SSH
      #   run: |
      #     mkdir -p ~/.ssh/
      #     echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     eval `ssh-agent`
      #     ssh-add ~/.ssh/id_rsa
      #     ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts
      # - name: Establish SSH connection
      #   run: ssh -T ${{ env.SSH_CONN }} 'echo "SSH connection established."'
      # - name: Stop existing docker compose
      #   run: |
      #     ssh -T ${{ env.SSH_CONN }} << EOF

      #     w = ${{ env.WORKDIR }}

      #     if [ -d "$w" ] && [ -f "$w/docker-compose.yml" ] && [ -f "$w/.env" ]; then
      #       cd $w
      #       docker compose down
      #     fi
      #     EOF
      # - name: Clear directory
      #   run: |
      #     ssh -T ${{ env.SSH_CONN }} << EOF

      #     w = ${{ env.WORKDIR }}

      #     if [ -d "$w" ]; then
      #       cd $w
      #       find . -mindepth 1 -not -name 'persist' -not -path './persist/*' -exec rm -rf {} +
      #     else
      #       mkdir $w
      #       mkdir $w/persist
      #     fi
      #       mkdir $w/temp
      #     EOF
      # - name: Transfer docker compose
      #   run: scp ./dc.prod.yml ${{ env.SSH_CONN }}:${{ env.WORKDIR }}/docker-compose.yml
      # - name: Generate .env file
      #   run: |
      #     ssh -T ${{ env.SSH_CONN }} << EOF

      #     cd ${{ env.WORKDIR }}

      #     echo WORKDIR=${{ env.WORKDIR }} >> .env

      #     echo PROJECT_NAME=${{ env.REPO_NAME }} >> .env
      #     echo DO_REG_IMAGE=${{ env.DO_REG_IMAGE }} >> .env

      #     echo KEY=${{ secrets.CMS_KEY }} >> .env
      #     echo SECRET=${{ secrets.CMS_SECRET }} >> .env
      #     echo ADMIN_EMAIL=${{ secrets.CMS_ADMIN_EMAIL }} >> .env
      #     echo ADMIN_PASSWORD=${{ secrets.CMS_ADMIN_PASSWORD }} >> .env
      #     echo ZEPTOMAIL_URL=${{ secrets.CMS_ZEPTOMAIL_URL }} >> .env
      #     echo ZEPTOMAIL_TOKEN=${{ secrets.CMS_ZEPTOMAIL_TOKEN }} >> .env

      #     EOF
      - name: Download extensions
        run: |
          w=${{ env.WORKDIR }}

          doctl compute ssh vps1 --ssh-key-path ~/.ssh/dovps << EOF

          mkdir -p ${w}/extensions && cd ${w}/extensions

          git clone https://pticon91:${{ secrets.DO_GIT_PAT }}@github.com/pticon91/directus-extension-uniss-zeptomail.git

          cd .. && chown -R 1000:1000 extensions

          EOF
      # - name: Run docker compose
      #   run: |
      #     ssh -T ${{ env.SSH_CONN }} << EOF

      #     cd ${{ env.WORKDIR }}

      #     doctl auth init -t ${{ secrets.DO_API_TOKEN }}
      #     doctl registry login --expiry-seconds 60

      #     docker compose pull
      #     docker compose up -d --build
      #     chown -R 1000:1000 persist

      #     EOF
      # - name: Remove SSH key
      #   run: |
      #     rm -rf ~/.ssh/id_rsa
      #     rm -rf ~/.ssh/known_hosts
